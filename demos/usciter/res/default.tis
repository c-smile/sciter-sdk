
const APP_NAME = "usciter.app";
include "settings.tis";
include "drop-zone.tis";
include "live-reload.tis";

const native = view.nativeApi();

const content = $(frame#content);
const inspectorButton = $(button#inspector);

var filename = null;
const file_filter = "files *.htm,*.html,*.svg,*.zip,*.scapp|*.htm;*.html;*.svg;*.zip;*.scapp|"
   "HTML files only(*.htm,*.html)|*.htm;*.html|"
   "SVG files only(*.svg)|*.svg|"
   "SCAPP files only (*.zip,*.scapp)|*.zip;*.scapp|"
   "All Files (*.*)|*.*";
   
var debugIsActive = false; 

function loadFile(fn)
{
  liveReload.reset();

  filename = fn;
  content.load(fn);
  $(button#reload).state.disabled = false;
  inspectorButton.state.disabled = false;
  if(debugIsActive)
    view.launchDebugView();

  var croot = content[0];
  var title = croot.$(head>title);
  if(title) {
    title = String.printf("uSciter: %s", title.text || "");
    view.windowCaption = title;
    $(window-caption).text = title;
  }
}

event click $(button#open)
{
  var fn = view.selectFile(#open,file_filter);
  if( fn ) 
  {
    loadFile(fn);
  }
}

event click $(button#reload)
{
  liveReload.reset();
  if( filename ) {
    content.load(filename);
    if(debugIsActive)
      view.launchDebugView();
  }
}

event click $(button#open-in-view)
{
  var fn = view.selectFile(#open,file_filter);
  if( fn ) 
  {
    view.load(fn);
  }
}

function setTheme(lightAmbience, blurbehind) {
  var bg = $(button#glass);
  if( lightAmbience ) {
    view.windowBlurbehind = blurbehind ? #light : #none;
    self.attributes["theme"] = "light";
    bg.state.checked = true;
  }
  else {
    view.windowBlurbehind = blurbehind ? #dark : #none;
    self.attributes["theme"] = "dark";
    bg.state.checked = false;
  }
}

function onMediaChange() {
  var blurbehind = view.mediaVar("ui-blurbehind"); // WM is blurbehind capable and uses it now
  var lightAmbience = view.mediaVar("ui-ambience") == "light"; // WM uses light theme
  setTheme(lightAmbience, blurbehind);
}

function setSystemGlass(onOff) {
  var bg = $(button#glass);
  var sbg = $(button#system-glass);
  if(onOff) {
    onMediaChange();
    bg.state.disabled = true; 
    sbg.state.checked = true;
    view.on("mediachange", onMediaChange);
  } else {
    bg.state.disabled = false; 
    sbg.state.checked = false;
    view.off(onMediaChange);
  }
}

event click $(button#system-glass)
{
  setSystemGlass(this.value);
  saveState();
}

event click $(button#glass)
{
  setTheme(this.value, true);
  saveState();
}

var liveReload = new LiveReload(function() {
  if( filename ) {
    content.load(filename);
    if(debugIsActive)
      view.launchDebugView();
  }
});

event click $(button#live-reload)
{
  if(this.value) {
    liveReload.start();
  } else {
    liveReload.stop();
  }
}

Settings.add
{
  store: function(data)
    {
      data.glass = {
        useSystem : $(button#system-glass).state.checked;  
        lightTheme : $(button#glass).state.checked; 
      };
    },
  restore: function(data) 
    {
      if(data.glass) {
        setSystemGlass(data.glass.useSystem);
        if( !data.glass.useSystem ) {
          var lightAmbience = data.glass.lightTheme;
          setTheme(lightAmbience, view.mediaVar("ui-blurbehind"));
        }
      }
    }
};


event click $(button#help)
{
  var path = System.home("../doc/main.htm");
  if(!System.scanFiles(path))
    path = System.home("../../doc/main.htm");
  if(!System.scanFiles(path)) {
    view.msgbox(#alert, path + " not found");
    return true;
  }

  view.window 
  {
    url: URL.fromPath(path),
    type: View.FRAME_WINDOW,
    state: View.WINDOW_SHOWN,
    alignment:5,
    width: 1024,
    height: 800
  };
}

DropZone.call(content,"*.htm;*.html;*.xhtml;*.svg"); 

event file-drop (evt) {
  loadFile(evt.data[0]);
  return true;
}

/*
function content.onExchange(evt)
{
   if( evt.type == Event.X_DRAG_ENTER && evt.draggingDataType == #file)
   {
     this.@#allow-drop = true;
     return true;
   }
   else if( evt.type == Event.X_DRAG_LEAVE )
   {
     this.@#allow-drop = undefined;
     return true;
   }
   else if( evt.type == Event.X_DRAG && evt.draggingDataType == #file)
   {
     return true;
   }
   else if( evt.type == Event.X_DROP && evt.draggingDataType == #file)
   {
     this.@#allow-drop = undefined;
     var fn;
     if(typeof evt.dragging == #array)
       fn = evt.dragging[0];
     else
       fn = evt.dragging;
     loadFile(fn);
     return true;
   }
}*/



event click $(button#inspector)
{
  if( var connectToInspector = view.connectToInspector ) {

    const SUFFIX = { Windows: ".exe", OSX: ".app" };

    var inspectorPath = System.home("inspector" + (SUFFIX[System.PLATFORM] || ""));
    
    if( !System.scanFiles(inspectorPath) ) {
      view.msgbox(#alert, "Cannot find " + inspectorPath);
      return;
    }
    Sciter.launch(inspectorPath);
    self.timer(300ms, function() { connectToInspector($(frame#content)) });
    
  }
}

function self.ready() {
  Settings.restore();
}
